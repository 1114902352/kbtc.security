认证Authentication：后文讲解
授权Authorization：后文讲解

Session Manager：会话管理，即用户登录后就是一次会话，在没有退出之前，它的所有信息都在会话中；会话可以是普通JavaSE环境的，也可以是如Web环境的；
Cryptography：加密，保护数据的安全性，如密码加密存储到数据库，而不是明文存储；
Caching：缓存，比如用户登录后，其用户信息、拥有的角色/权限不必每次去查，这样可以提高效率；

Subject：主体，代表了当前“用户”，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是Subject
SecurityManager：安全管理器；即所有与安全有关的操作都会与SecurityManager交互；且它管理着所有Subject；
Realm：域，Shiro从从Realm获取安全数据（如用户、角色、权限），安全数据源

跟着开涛学shiro 第二章 身份验证
验证(Authentication):相当于登录，即身份验证的过程，证明一个用户的真是身份，需要提供系统理解和相信的身份信息证据。
身份(Principals):Suject的标识属性，可以是任何东西，如用户名、邮箱等，为保证唯一独特的标识，一般是使用用户名或邮箱地址。
证明(Credentials):证明主体真正拥有所需的身份，比如密码、指纹等机密内容。

Authenticating流程:
1、收集Suject提交的身份和证明，构造一个Token，比如UsernamePasswordToken
2、调用doGetAuthenticationInfo方法登录,一般是由subject.login(token)方法调用,不正确时抛出各种异常。
3、提交内容正确，允许访问，否则阻止访问，由AccessControlFilter及其子类实现onAccessDenied方法，验证成功返回True。

已记住(Remembered):一个remebered的subject没有身份及subject.getPrincipals()为空。不能作为真实登录用户使用。
已验证(Authenticated):一个Authenticated的suject成功验证后存于session中，suject.isAuthenticated()==true
退出：suject.logout，删除session，重新被认定为匿名访问。


认证策略(AuthenticationStrategy):多个Realm时，按照配置的策略进行匹配。
FirstSuccessfulStrategy：只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略；
AtLeastOneSuccessfulStrategy：只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，返回所有Realm身份验证成功的认证信息；
AllSuccessfulStrategy：所有Realm验证成功才算成功，且返回所有Realm身份验证成功的认证信息，如果有一个失败就失败了。

IniRealm：通过ini.txt文件获取主体信息
PropertiesRealm：通过配置文件获取主体信息
JdbcRealm：通过数据库获取主体信息，注意默认获取数据时必须按照它的表结构，但是我们可以通过注入自己的SQL来覆盖。
一般情况下，我们都是要自己定义Realm。



跟着开涛学shiro 第二章 授权
授权(Authorization)：访问控制，即应用中控制谁能访问哪些资源。
1、首先调用Subject.isPermitted*/hasRole*接口，其会委托给SecurityManager，而SecurityManager接着会委托给Authorizer；
2、Authorizer是真正的授权者，如果我们调用如isPermitted(“user:view”)，其首先会通过PermissionResolver把字符串转换成相应的Permission实例；
3、在进行授权之前，其会调用相应的Realm获取Subject相应的角色/权限用于匹配传入的角色/权限；
4、Authorizer会判断Realm的角色/权限是否和传入的匹配，如果有多个Realm，会委托给ModularRealmAuthorizer进行循环判断，如果匹配如isPermitted*/hasRole*会返回true，否则返回false表示授权失败

判定是否含有某种权限的方法：
编程式：suject.hasRole("admin")
注解式：@RequeiresRoles("admin")
JSP标签:<shiro:hasRole name="admin"></shiro:hasRole>

注意：
subject.hasRole("admin")是返回一个boolean类型
subject.checkRole("admin")本身是一个void，只要当权限不满足时会抛出一个UnauthorizedException

权限字符串：
role=system:money:* 给角色授予一个三级权限，其中*代表任一操作，此时subject.isPermitted("system:money:update")==true
role=*:money:update 可以匹配*:money:update


提高部分


自定义时可以实现的拦截器的抽象类:
AdviceFilter---提供了AOP风格的支持，类似于SpringMVC中的Interceptor，即前置后置增强,抽象方法如下：
boolean preHandle(ServletRequest request, ServletResponse response) throws Exception  
void postHandle(ServletRequest request, ServletResponse response) throws Exception  
void afterCompletion(ServletRequest request, ServletResponse response, Exception exception) throws Exception;

PathMatchingFilter---URL匹配，一旦匹配成功就干某件事，抽象方法
boolean pathsMatch(String path, ServletRequest request)  匹配成功返回true执行onPreHandle方法
boolean onPreHandle(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception 返回false中断流程

AccessControlFilter--提供了访问控制的基础功能；比如是否允许访问/当访问拒绝时如何处理等：
abstract boolean isAccessAllowed(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;  表示是否允许访问,mappedValue就是[urls]配置中拦截器参数部分，如果允许访问返回true，否则false；
boolean onAccessDenied(ServletRequest request, ServletResponse response, Object mappedValue) throws Exception;  表示当访问拒绝时是否已经处理了；如果返回true表示需要继续处理；如果返回false表示该拦截器实例已经处理了，将直接返回即可。

.....


已实现的默认拦截器:
身份验证相关的
authc---org.apache.shiro.web.filter.authc.FormAuthenticationFilter
基于表单的拦截器；如“/**=authc”，如果没有登录会跳到相应的登录页面登录；
主要属性：
usernameParam：表单提交的用户名参数名（ username）； passwordParam：表单提交的密码参数名（password）；
rememberMeParam：表单提交的密码参数名（rememberMe）；  loginUrl：登录页面地址（/login.jsp）；
successUrl：登录成功后的默认重定向地址； failureKeyAttribute：登录失败后错误信息存储key（shiroLoginFailure）；

authcBasic---org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter	
Basic HTTP身份验证拦截器，主要属性： applicationName：弹出登录框显示的信息（application）；

logout---org.apache.shiro.web.filter.authc.LogoutFilter
退出拦截器，主要属性：redirectUrl：退出成功后重定向的地址（/）;示例“/logout=logout”

user---org.apache.shiro.web.filter.authc.UserFilter
用户拦截器，用户已经身份验证/记住我登录的都可；示例“/**=user”

anon---org.apache.shiro.web.filter.authc.AnonymousFilter
匿名拦截器，即不需要登录即可访问；一般用于静态资源过滤；示例“/static/**=anon”


授权相关的
roles---org.apache.shiro.web.filter.authz.RolesAuthorizationFilter
角色授权拦截器，验证用户是否拥有所有角色；主要属性： loginUrl：登录页面地址（/login.jsp）；unauthorizedUrl：未授权后重定向的地址；示例“/admin/**=roles[admin]”

perms---org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter
权限授权拦截器，验证用户是否拥有所有权限；属性和roles一样；示例“/user/**=perms["user:create"]”


基于动态URL的权限匹配
上述的权限控制是在代码层面的控制，我们是在代码里面定死某一操作的权限，但日常开发中，我们对权限的操作是随机的，没法集中起来
管理，这个时候我们需要一种集中管理的权限控制，即基于URL的权限控制。

这种方式是通过shiro的过滤链实现的，由于默认PathMatchingFilterChainResolver实现有问题
(如果多个拦截器链都匹配了当前请求URL，那么只返回第一个找到的拦截器链；后续我们可以修改此处的代码，将多个匹配的拦截器链合并返回。),所以我们需要改造过滤链。

改造流程:
1、ShiroFilerChainManager 负责初始化过滤链，@PostConstruct保证spring初始化时执行，将spring配置的默认过滤链注入到本类中的
成员变量filterChainManager中，然后将数据库中过滤链添加进去。每次修改权限配置时，都要手动调用ShiroFilerChainManager.initFilterChains来初始化过滤链。
2、PathMatchingFilterChainResolver进行匹配时，是一旦匹配到合适的过滤就返回，我们需要自定义一个，让他返回一个过滤链的集合
3、DefaultFilterChainManager接受代理时需要修改参数定义，让其可以接收过滤链的集合。

比如 /show.jsp=auth1 /** = auth2 默认情况下只按照配置顺序执行Auth1的过滤器  而Auth2的过滤器不再执行


Redis集中共享session
使用架包Reids-session
